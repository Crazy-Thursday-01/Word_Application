# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'mainwindow.ui'
# Created by: PyQt5 UI code generator 5.15.9

# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

# Import necessary modules and libraries
import sys
import os
import shutil
from docx import Document
from PyQt5.QtWidgets import QFileDialog
from PyQt5 import QtCore, QtWidgets, QtGui
from PyQt5.QtGui import QIcon, QPixmap
from PyQt5.QtWidgets import QApplication, QMainWindow, QTableWidget, QTableWidgetItem, QPushButton, QVBoxLayout, \
    QWidget, QHBoxLayout, QCheckBox, QDialog, QLabel, QLineEdit, QVBoxLayout, QPushButton, QMessageBox, QComboBox
from dotenv import load_dotenv
import database.HandleDatabase as db

# Load environment variables from the .env file
load_dotenv(dotenv_path="../infomation.env")

# Define the LibraryViewer class for displaying the document library content
class LibraryViewer(QtWidgets.QMainWindow):
    def __init__(self, library_path, parent=None):
        super(LibraryViewer, self).__init__(parent)

        # Translate function for internationalization
        self._translate = QtCore.QCoreApplication.translate

        # Set the default document library path
        self.library_path = library_path
        self.init_ui()

    def init_ui(self):
        central_widget = QtWidgets.QWidget()
        self.setCentralWidget(central_widget)
        self.setWindowTitle("Document Library Content")
        self.setGeometry(100, 100, 600, 400)
        layout = QtWidgets.QVBoxLayout()

        # Create a QListWidget to display the list of files in the document library
        self.file_list_widget = QtWidgets.QListWidget()
        self.load_library_files()
        layout.addWidget(self.file_list_widget)

        central_widget.setLayout(layout)

    def load_library_files(self):
        # Load all files in the document library
        if os.path.exists(self.library_path) and os.path.isdir(self.library_path):
            files = [f for f in os.listdir(self.library_path) if os.path.isfile(os.path.join(self.library_path, f))]
            self.file_list_widget.addItems(files)
        else:
            QtWidgets.QMessageBox.warning(self, "Error", "Document library path does not exist or is not a folder")

# Define the history_window class for displaying user activity history
class history_window(QtWidgets.QMainWindow):
    def __init__(self, admin, parent=None):
        super(history_window, self).__init__(parent)
        self.admin = admin
        self.setupUi()

    def setupUi(self):
        # Set up the UI for displaying user activity history
        self.central_widget = QtWidgets.QWidget(self)
        self.setCentralWidget(self.central_widget)

        self.table_widget = QtWidgets.QTableWidget(self.central_widget)
        self.table_widget.setColumnCount(5)
        self.table_widget.setHorizontalHeaderLabels(["Username", "Admin", "Time", "Article", "Duplication Rate"])
        self.setGeometry(100, 100, 550, 400)
        self.setWindowTitle("History Records")
        activities = self.admin.get_activities()
        self.populate_table(activities)

        layout = QtWidgets.QVBoxLayout(self.central_widget)
        layout.addWidget(self.table_widget)

    def populate_table(self, activities):
        # Populate the table with user activity history
        self.table_widget.setRowCount(len(activities))

        for row, activity in enumerate(activities):
            self.table_widget.setItem(row, 0, QtWidgets.QTableWidgetItem(activity.username))
            self.table_widget.setItem(row, 1, QtWidgets.QTableWidgetItem("Yes" if activity.is_admin else "No"))
            self.table_widget.setItem(row, 2, QtWidgets.QTableWidgetItem(str(activity.time)))
            self.table_widget.setItem(row, 3, QtWidgets.QTableWidgetItem(activity.article))
            self.table_widget.setItem(row, 4, QtWidgets.QTableWidgetItem(str(activity.Duplication_rate)))

# Define the DeleteUserWindow class for deleting users
class DeleteUserWindow(QtWidgets.QMainWindow):
    def __init__(self, admin, parent=None):
        super(DeleteUserWindow, self).__init__(parent)
        self.admin = admin
        self.user_data = admin.get_users_info()
        self.selected_users = set()
        self.setGeometry(200, 200, 550, 400)
        self.setWindowTitle("Delete User")
        self.central_widget = QWidget(self)
        self.setCentralWidget(self.central_widget)

        self.table_widget = QTableWidget(self.central_widget)
        self.table_widget.setColumnCount(5)
        self.table_widget.setHorizontalHeaderLabels(["Select", "Username", "Account", "Password", "Admin"])

        self.populate_table()

        self.delete_button = QPushButton("Delete Selected Users")
        self.delete_button.clicked.connect(self.delete_selected_users)

        layout = QVBoxLayout()
        layout.addWidget(self.table_widget)
        layout.addWidget(self.delete_button)
        self.central_widget.setLayout(layout)

    def populate_table(self):
        # Populate the table with user information
        self.table_widget.setRowCount(len(self.user_data))

        for row, user_info in enumerate(self.user_data):
            checkbox = QCheckBox()
            checkbox.stateChanged.connect(lambda state, row=row: self.checkbox_state_changed(state, row))

            username_item = QTableWidgetItem(user_info.username)
            account_info_item = QTableWidgetItem(user_info.account)
            password_info_item = QTableWidgetItem(user_info.password)
            admin_info_item = QTableWidgetItem("Yes" if user_info.is_admin else "No")

            username_item.setFlags(username_item.flags() ^ QtCore.Qt.ItemIsEditable)
            account_info_item.setFlags(account_info_item.flags() ^ QtCore.Qt.ItemIsEditable)
            password_info_item.setFlags(password_info_item.flags() ^ QtCore.Qt.ItemIsEditable)
            admin_info_item.setFlags(admin_info_item.flags() ^ QtCore.Qt.ItemIsEditable)

            self.table_widget.setItem(row, 0, QTableWidgetItem())
            self.table_widget.setCellWidget(row, 0, checkbox)
            self.table_widget.setItem(row, 1, username_item)
            self.table_widget.setItem(row, 2, account_info_item)
            self.table_widget.setItem(row, 3, password_info_item)
            self.table_widget.setItem(row, 4, admin_info_item)

    def checkbox_state_changed(self, state, row):
        # Update the selected users based on checkbox state
        username = self.table_widget.item(row, 1).text()

        if state == 2:  # 2 represents checked state
            self.selected_users.add(username)
        elif state == 0:  # 0 represents unchecked state
            self.selected_users.discard(username)

    def delete_selected_users(self):
        # Delete selected users
        try:
            for username in self.selected_users:
                user_info = next((user for user in self.user_data if user.username == username), None)
                if user_info and not user_info.is_admin:
                    # If the user exists and is not an admin, delete the user
                    self.admin.delete_user(username)
                elif user_info and user_info.is_admin:
                    # If the user is an admin, show a warning message
                    QtWidgets.QMessageBox.warning(self, "Unable to Delete", f"Admin {username} cannot be deleted")
                    return
                else:
                    print(f"User {username} not found in the table.")

            # Refresh the table data
            self.user_data = self.admin.get_users_info()
            self.populate_table()

            QtWidgets.QMessageBox.information(self, "Successfully", "Selected users have been successfully deleted")
        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "Error", f"Error occurred while deleting users: {e}")
            print(e)

# Define the AddUserWindow class for adding users
class AddUserWindow(QtWidgets.QMainWindow):
    def __init__(self, admin, parent=None):
        super(AddUserWindow, self).__init__(parent)
        self.admin = admin

        self.init_ui()

    def init_ui(self):
        self.setWindowTitle("User Information")
        central_widget = QWidget(self)
        self.setCentralWidget(central_widget)

        layout = QVBoxLayout()
        self.setGeometry(200, 200, 350, 400)
        self.username_label = QLabel("Username:")
        self.username_edit = QLineEdit()

        self.account_label = QLabel("Account:")
        self.account_edit = QLineEdit()

        self.password_label = QLabel("Password:")
        self.password_edit = QLineEdit()

        self.is_admin_label = QLabel("Is Admin:")
        self.is_admin_combobox = QComboBox()
        self.is_admin_combobox.addItems(['Yes', 'No'])

        self.save_button = QPushButton("Save")
        self.save_button.clicked.connect(self.save_changes)

        layout.addWidget(self.username_label)
        layout.addWidget(self.username_edit)
        layout.addWidget(self.account_label)
        layout.addWidget(self.account_edit)
        layout.addWidget(self.password_label)
        layout.addWidget(self.password_edit)
        layout.addWidget(self.is_admin_label)
        layout.addWidget(self.is_admin_combobox)
        layout.addWidget(self.save_button)

        central_widget.setLayout(layout)

    def save_changes(self):
        # Save user information changes to the database
        try:
            new_username = self.username_edit.text()
            new_account = self.account_edit.text()
            new_password = self.password_edit.text()
            new_is_admin = True if self.is_admin_combobox.currentText().lower() == 'yes' else False

            # Add logic here to save the modified data to the database
            # You may need to call the add_user method of the Admin class

            self.admin.add_user(new_username, new_account, new_password, new_is_admin)
            QMessageBox.information(self, "Success", "User information added successfully")
            self.close()  # Close the dialog
        except Exception as e:
            QMessageBox.critical(self, "Error", f"Error occurred while saving user information: {e}")
            print(e)

# Define the adminUiWorkForm class for the main admin UI
class adminUiWorkForm(QtWidgets.QMainWindow):

    def __init__(self,admin,parent=None):
        super(adminUiWorkForm, self).__init__(parent)
        self.admin:db.Admin=admin
        self.file=""
        self._translate = QtCore.QCoreApplication.translate
        self.Duplication_rate=0
        self.setupUi(self)
        self.library_path = os.environ['document_library_path']  # 默认文档库地址
    def setupUi(self, Form):
        self.Form=Form
        Form.setObjectName("Form")
        Form.resize(964, 778)
        Form.setLayoutDirection(QtCore.Qt.LeftToRight)
        Form.setStyleSheet("font: 75 18pt \"Agency FB\";")
        self.content_text = QtWidgets.QTextEdit(Form)
        self.content_text.setGeometry(QtCore.QRect(40, 200, 341, 511))
        self.content_text.setStyleSheet("height: 30px;\n"
"border-radius: 15px;\n"
"padding-left: 10px;\n"
"border: 1px solid  rgb(85, 0, 255);")
        self.content_text.setObjectName("content_text")
        self.rep_text = QtWidgets.QTextEdit(Form)
        self.rep_text.setGeometry(QtCore.QRect(560, 210, 361, 501))
        self.rep_text.setStyleSheet("height: 30px;\n"
"border-radius: 15px;\n"
"padding-left: 10px;\n"
"border: 1px solid  rgb(85, 0, 255);")
        self.rep_text.setObjectName("rep_text")
        self.sumit_buttion = QtWidgets.QPushButton(Form)
        self.sumit_buttion.setEnabled(True)
        self.sumit_buttion.setGeometry(QtCore.QRect(110, 100, 111, 51))
        self.sumit_buttion.setStyleSheet("height: 30px;\n"
"nborder-radius: 15px;\n"
"npadding-left: 10px;\n"
"nborder: 1px solid  rgb(85, 0, 255);\n"
"font: 20pt \"Agency FB\";")
        self.sumit_buttion.setShortcut("enter")
        self.sumit_buttion.setObjectName("sumit_buttion")
        self.sumit_buttion.setStyleSheet("""
            QPushButton {
                border: 2px solid #3498db;  /* 边框宽度和颜色 */
                border-radius: 10px;  /* 边框圆角 */
                background-color: #ecf0f1;  /* 背景颜色 */
                color: #3498db;  /* 文本颜色 */
                font-size: 20px;  /* 字体大小 */
                padding: 5px 16px;  /* 内边距 */
            }
            QPushButton:hover {
                background-color: #d5d8dc;  /* 鼠标悬停时的背景颜色 */
            }
            QPushButton:pressed {
                background-color: #bdc3c7;  /* 按下按钮时的背景颜色 */
            }
            """)
        self.check_buttion = QtWidgets.QPushButton(Form)
        self.check_buttion.setGeometry(QtCore.QRect(410, 290, 111, 81))
        self.check_buttion.setStyleSheet("""
            QPushButton {
                background-color: #008CBA;
                border: none;
                color: white;
                padding: 10px 24px;
                text-align: center;
                text-decoration: none;
                display: inline-block;
                font-size: 14px;
                margin: 4px 2px;
                cursor: pointer;
                border-radius: 10px;
            }
            QPushButton:hover {
                background-color: #005f6b;
            }
            QPushButton:pressed {
                background-color: #004770;
            }
            """)
        self.check_buttion.setObjectName("check_buttion")
        self.rep_buttion = QtWidgets.QPushButton(Form)
        self.rep_buttion.setGeometry(QtCore.QRect(410, 470, 111, 81))
        self.rep_buttion.setStyleSheet("""
            QPushButton {
                border: 2px solid #3498db;  /* 边框宽度和颜色 */
                border-radius: 10px;  /* 边框圆角 */
                background-color: #ecf0f1;  /* 背景颜色 */
                color: #3498db;  /* 文本颜色 */
                font-size: 16px;  /* 字体大小 */
                padding: 5px 14px;  /* 内边距 */
            }
            QPushButton:hover {
                background-color: #d5d8dc;  /* 鼠标悬停时的背景颜色 */
            }
            QPushButton:pressed {
                background-color: #bdc3c7;  /* 按下按钮时的背景颜色 */
            }
            """)
        # self.rep_buttion.setIcon(QtGui.QIcon('Word查重/image/a.jpg'))
        # self.rep_buttion.setIconSize(QtCore.QSize(18, 18))
        self.rep_buttion.setObjectName("rep_buttion")

        self.check_progressBar = QtWidgets.QProgressBar(Form)
        self.check_progressBar.setGeometry(QtCore.QRect(30, 730, 931, 31))
        self.check_progressBar.setProperty("value", 24)
        self.check_progressBar.setObjectName("check_progressBar")
        self.check_progressBar.setValue(0)
        self.check_progressBar.setStyleSheet("""
            QProgressBar {
                border: 2px solid grey;
                border-radius: 5px;
                text-align: center;
            }
            QProgressBar::chunk {
                background-color: #CD96CD;
                width: 10px;
            }
            """)
        self.check_label = QtWidgets.QLabel(Form)
        self.check_label.setGeometry(QtCore.QRect(620, 90, 251, 71))
        self.check_label.setObjectName("check_label")
        self.check_label.setStyleSheet("""
            QLabel {
                border: 2px solid #4CAF50;  /* 边框宽度和颜色 */
                border-radius: 10px;  /* 边框圆角 */
                background-color: #f2f2f2;  /* 背景颜色 */
                color: #4CAF50;  /* 文本颜色 */
                font-size: 24px;  /* 字体大小 */
                padding: 10px;  /* 内边距 */
            }
            QLabel:hover {
                background-color: #e0e0e0;  /* 鼠标悬停时的背景颜色 */
            }
            """)
        #菜单栏
        self.menuBar = self.menuBar()  # 获取窗口的菜单栏
        self.menuBar.setGeometry(QtCore.QRect(0, 0, 964, 30))  # 设置菜单栏的位置和大小

        # 创建菜单项
        self.menuView = self.menuBar.addMenu("查看")
        self.menuAdd = self.menuBar.addMenu("增加")
        self.menuDelete = self.menuBar.addMenu("删除")
        self.menuUserControl = self.menuBar.addMenu("用户管理")
        self.menuhistory=self.menuBar.addMenu("个人中心")


        # 菜单项的动作（行为）
        self.actionViewLibrary = QtWidgets.QAction("查看文档库", self)
        self.actionAddDocument = QtWidgets.QAction("增加文档", self)
        self.actionDeleteDocument = QtWidgets.QAction("删除文档", self)
        self.actionAddUser = QtWidgets.QAction("增加用户", self)
        self.actionDeleteUser = QtWidgets.QAction("删除用户", self)
        self.actionPerson=QtWidgets.QAction("历史记录",self)


        # 将动作添加到菜单项
        self.menuView.addAction(self.actionViewLibrary)
        self.menuAdd.addAction(self.actionAddDocument)
        self.menuDelete.addAction(self.actionDeleteDocument)
        self.menuhistory.addAction(self.actionPerson)
        self.menuUserControl.addAction(self.actionAddUser)
        self.menuUserControl.addAction(self.actionDeleteUser)

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)
        #事件部分
        self.sumit_buttion.clicked.connect(self.upload)
        self.check_buttion.clicked.connect(self.check)
        self.rep_buttion.clicked.connect(self.export_report)
        # 将槽函数连接到动作
        self.actionViewLibrary.triggered.connect(self.view_library)
        self.actionAddDocument.triggered.connect(self.add_document)
        self.actionDeleteDocument.triggered.connect(self.delete_document)
        self.actionPerson.triggered.connect(self.show_history)
        self.actionAddUser.triggered.connect(self.add_user)
        self.actionDeleteUser.triggered.connect(self.delete_user)

    def retranslateUi(self, Form):
        Form.setWindowTitle(self._translate("Form", "Form"))
        self.sumit_buttion.setText(self._translate("Form", "上传文档"))
        self.check_buttion.setText(self._translate("Form", "开始查重"))
        self.rep_buttion.setText(self._translate("Form", "导出报告"))
        self.check_label.setText(self._translate("Form", "查重率为："))


    def update_content_text(self, file_path):
        try:
            document = Document(file_path)
            content = ""
            for paragraph in document.paragraphs:
                content += paragraph.text + "\n"

            self.content_text.setPlainText(content)
            self.content_text.setReadOnly(True)
        except Exception as e:
            print(f"An error occurred while reading the document: {e}")

    def upload(self):
        try:
            excel_file, _ = QtWidgets.QFileDialog.getOpenFileName(self.Form, '打开文件', 'C:\\', '所有文件(*)')
            self.file = excel_file
            self.update_content_text(self.file)
        except Exception as e:
            self.rep_text.setText(f"An error occurred: {e}")
            # print(f"An error occurred: {e}")

    def check(self):
        try:
            library_path = os.environ['document_library_path']
            if not self.file:
                QtWidgets.QMessageBox.warning(self, "错误消息", "文件地址为空")
                return

                # 检查文件是否存在
            if not os.path.exists(self.file):
                QtWidgets.QMessageBox.warning(self, "错误消息", "文件不存在")
                return
            self.rep_text.setText("")
            du=create_checker(self.file,library_path=os.environ['document_library_path'])
            return_list,self.Duplication_rate=du.work(self.check_progressBar)
            self.check_label.setText(self._translate("Form", f"查重率为:  {float(self.Duplication_rate)}"))
            # 添加记录到数据库
            file_name, _ = os.path.splitext(os.path.basename(self.file))
            self.admin.add_activity(article=file_name, duplication_rate=float(self.Duplication_rate))

            for element in return_list:
                content=f"\n上传文档句子：'{element[0]}'\n最相似的句子：'{element[1]}'\n最大相似度：{element[2]}\n所在文档：{element[3]}"
                if self.rep_text.toPlainText().startswith("An error occurred:"):
                    self.rep_text.setText("")
                    self.rep_text.append(content)
                else:
                    self.rep_text.append(content)
            self.rep_text.setReadOnly(True)


        except Exception as e:
            self.rep_text.setText(f"An error occurred: {e}")
            # print(f"An error occurred: {e}")
    #导出函数
    def export_report(self):
        try:
            # 弹出文件保存对话框，获取用户选择的文件路径
            save_folder= QFileDialog.getExistingDirectory(self.Form, '选择导出位置', 'C:\\')

            file_name, _ = os.path.splitext(os.path.basename(self.file))
            save_path = os.path.join(save_folder, file_name + "_report.txt")

            # 如果用户取消了保存，则返回
            if not save_path:
                return
            if save_path:
                QtWidgets.QMessageBox.warning(self.Form, "取消", "导出报告操作已取消")
            # 将报告内容保存到用户指定的文件中
            with open(save_path, 'w', encoding='utf-8') as file:
                file.write(f"查重率为: {self.Duplication_rate}\n")
                file.write(self.rep_text.toPlainText())

            # 弹出保存成功的提示框
            QtWidgets.QMessageBox.information(self.Form, "成功", "报告已成功导出")
        except Exception as e:
            # 弹出错误提示框
            QtWidgets.QMessageBox.critical(self.Form, "错误", f"导出报告时发生错误: {e}")
            print(e)

    def view_library(self):
        # 实现查看文档库的功能
        viewer = LibraryViewer(self.library_path, parent=self.Form)
        viewer.show()

    def add_document(self):
        # 获取用户选择的文件或文件夹路径
        path, _ = QFileDialog.getOpenFileName(self.Form, '选择要添加的文件或文件夹', 'C:\\', '所有文件(*)')

        if path:
            if os.path.isdir(path):
                # 如果是文件夹，遍历文件夹中的所有文件
                for filename in os.listdir(path):
                    document_path = os.path.join(path, filename)

                    # 判断是否为文件
                    if os.path.isfile(document_path):
                        # 复制文档到文档库
                        document_name = os.path.basename(document_path)
                        target_path = os.path.join(self.library_path, document_name)
                        shutil.copy(document_path, target_path)
                        QtWidgets.QMessageBox.information(self.Form, "成功", f"文档已成功添加: {target_path}")
            elif os.path.isfile(path):
                # 如果是单个文件，执行添加单个文件的操作
                document_path = path
                document_name = os.path.basename(document_path)
                target_path = os.path.join(self.library_path, document_name)
                shutil.copy(document_path, target_path)
                QtWidgets.QMessageBox.information(self.Form, "成功", f"文档已成功添加: {target_path}")
        else:
            QtWidgets.QMessageBox.warning(self.Form, "取消", "添加文档操作已取消")

    def delete_document(self):
        # 实现删除文档的功能
        document_path, _ = QFileDialog.getOpenFileName(self.Form, '选择要删除的文档', self.library_path, '所有文件(*)')
        if document_path:
            os.remove(document_path)
            QtWidgets.QMessageBox.information(self.Form, "成功", f"文档已成功删除: {document_path}")
        else:
            QtWidgets.QMessageBox.warning(self.Form, "取消", "删除文档操作已取消")

    def show_history(self):
        try:

            UI=history_window(self.admin,parent=self)
            UI.show()

        except Exception as e:
            print(e)

    def add_user(self):

        try:
            UI=AddUserWindow(self.admin,parent=self)
            UI.show()
        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "错误", f"添加用户时发生错误: {e}")
            print(e)
    def delete_user(self):
        try:

            UI = DeleteUserWindow(self.admin, parent=self)
            UI.show()

        except Exception as e:
            print(e)
def create_adminUI(admin:db.Admin):
    app = QtWidgets.QApplication(sys.argv)
    UI = adminUiWorkForm(admin)
    UI.show()
    sys.exit(app.exec_())

if __name__ == "__main__":
    admin=db.Admin("admin","admin","password",True)
    create_adminUI(admin)
