# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'mainwindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.9

# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sys
import os
import shutil
from  docx import Document
from PyQt5.QtWidgets import QFileDialog
from PyQt5 import QtCore, QtWidgets,QtGui
from PyQt5.QtGui import QIcon,QPixmap
from dotenv import load_dotenv
from module.DuplicateCheck import create_checker
from database.HandleDatabase import nomal_user
load_dotenv(dotenv_path="../infomation.env")
class history_window(QtWidgets.QMainWindow):
    def __init__(self, user, parent=None):
        super(history_window, self).__init__(parent)
        self.user = user
        self.setupUi()

    def setupUi(self):
        self.central_widget = QtWidgets.QWidget(self)
        self.setCentralWidget(self.central_widget)

        self.table_widget = QtWidgets.QTableWidget(self.central_widget)
        self.table_widget.setColumnCount(5)  # 设置列数
        self.table_widget.setHorizontalHeaderLabels([ "用户名", "管理员", "时间", "文章", "重复率"])
        self.setGeometry(100, 100, 550, 400)
        self.setWindowTitle("历史记录")
        activities = self.user.get_activities()
        self.populate_table(activities)

        layout = QtWidgets.QVBoxLayout(self.central_widget)
        layout.addWidget(self.table_widget)

    def populate_table(self, activities):
        self.table_widget.setRowCount(len(activities))  # 设置行数

        for row, activity in enumerate(activities):

            self.table_widget.setItem(row, 0, QtWidgets.QTableWidgetItem(activity.username))
            self.table_widget.setItem(row, 1, QtWidgets.QTableWidgetItem("是" if activity.is_admin else "否"))
            self.table_widget.setItem(row, 2, QtWidgets.QTableWidgetItem(str(activity.time)))
            self.table_widget.setItem(row, 3, QtWidgets.QTableWidgetItem(activity.article))
            self.table_widget.setItem(row, 4, QtWidgets.QTableWidgetItem(str(activity.Duplication_rate)))


class userUiWorkForm(QtWidgets.QMainWindow):

    def __init__(self,user:nomal_user,parent=None):
        super(userUiWorkForm, self).__init__(parent)
        self.file=""
        self._translate = QtCore.QCoreApplication.translate
        self.user=user
        self.Duplication_rate=0
        self.setupUi(self)
        self.library_path =os.environ['document_library_path']  # 默认文档库地址
    def setupUi(self, Form):
        self.Form=Form
        Form.setObjectName("Form")
        Form.resize(964, 778)
        Form.setLayoutDirection(QtCore.Qt.LeftToRight)
        Form.setStyleSheet("font: 75 18pt \"Agency FB\";")
        self.content_text = QtWidgets.QTextEdit(Form)
        self.content_text.setGeometry(QtCore.QRect(40, 200, 341, 511))
        self.content_text.setStyleSheet("height: 30px;\n"
"border-radius: 15px;\n"
"padding-left: 10px;\n"
"border: 1px solid  rgb(85, 0, 255);")
        self.content_text.setObjectName("content_text")
        self.rep_text = QtWidgets.QTextEdit(Form)
        self.rep_text.setGeometry(QtCore.QRect(560, 210, 361, 501))
        self.rep_text.setStyleSheet("height: 30px;\n"
"border-radius: 15px;\n"
"padding-left: 10px;\n"
"border: 1px solid  rgb(85, 0, 255);")
        self.rep_text.setObjectName("rep_text")
        self.sumit_buttion = QtWidgets.QPushButton(Form)
        self.sumit_buttion.setEnabled(True)
        self.sumit_buttion.setGeometry(QtCore.QRect(110, 100, 111, 51))
        self.sumit_buttion.setStyleSheet("height: 30px;\n"
"nborder-radius: 15px;\n"
"npadding-left: 10px;\n"
"nborder: 1px solid  rgb(85, 0, 255);\n"
"font: 20pt \"Agency FB\";")
        self.sumit_buttion.setShortcut("enter")
        self.sumit_buttion.setObjectName("sumit_buttion")
        self.sumit_buttion.setStyleSheet("""
            QPushButton {
                border: 2px solid #3498db;  /* 边框宽度和颜色 */
                border-radius: 10px;  /* 边框圆角 */
                background-color: #ecf0f1;  /* 背景颜色 */
                color: #3498db;  /* 文本颜色 */
                font-size: 20px;  /* 字体大小 */
                padding: 5px 16px;  /* 内边距 */
            }
            QPushButton:hover {
                background-color: #d5d8dc;  /* 鼠标悬停时的背景颜色 */
            }
            QPushButton:pressed {
                background-color: #bdc3c7;  /* 按下按钮时的背景颜色 */
            }
            """)
        self.check_buttion = QtWidgets.QPushButton(Form)
        self.check_buttion.setGeometry(QtCore.QRect(410, 290, 111, 81))
        self.check_buttion.setStyleSheet("""
            QPushButton {
                background-color: #008CBA;
                border: none;
                color: white;
                padding: 10px 24px;
                text-align: center;
                text-decoration: none;
                display: inline-block;
                font-size: 14px;
                margin: 4px 2px;
                cursor: pointer;
                border-radius: 10px;
            }
            QPushButton:hover {
                background-color: #005f6b;
            }
            QPushButton:pressed {
                background-color: #004770;
            }
            """)
        self.check_buttion.setObjectName("check_buttion")
        self.rep_buttion = QtWidgets.QPushButton(Form)
        self.rep_buttion.setGeometry(QtCore.QRect(410, 470, 111, 81))
        self.rep_buttion.setStyleSheet("""
            QPushButton {
                border: 2px solid #3498db;  /* 边框宽度和颜色 */
                border-radius: 10px;  /* 边框圆角 */
                background-color: #ecf0f1;  /* 背景颜色 */
                color: #3498db;  /* 文本颜色 */
                font-size: 16px;  /* 字体大小 */
                padding: 5px 14px;  /* 内边距 */
            }
            QPushButton:hover {
                background-color: #d5d8dc;  /* 鼠标悬停时的背景颜色 */
            }
            QPushButton:pressed {
                background-color: #bdc3c7;  /* 按下按钮时的背景颜色 */
            }
            """)
        # self.rep_buttion.setIcon(QtGui.QIcon('Word查重/image/a.jpg'))
        # self.rep_buttion.setIconSize(QtCore.QSize(18, 18))
        self.rep_buttion.setObjectName("rep_buttion")

        self.check_progressBar = QtWidgets.QProgressBar(Form)
        self.check_progressBar.setGeometry(QtCore.QRect(30, 730, 931, 31))
        self.check_progressBar.setProperty("value", 24)
        self.check_progressBar.setObjectName("check_progressBar")
        self.check_progressBar.setValue(0)
        self.check_progressBar.setStyleSheet("""
            QProgressBar {
                border: 2px solid grey;
                border-radius: 5px;
                text-align: center;
            }
            QProgressBar::chunk {
                background-color: #CD96CD;
                width: 10px;
            }
            """)
        self.check_label = QtWidgets.QLabel(Form)
        self.check_label.setGeometry(QtCore.QRect(620, 90, 251, 71))
        self.check_label.setObjectName("check_label")
        self.check_label.setStyleSheet("""
            QLabel {
                border: 2px solid #4CAF50;  /* 边框宽度和颜色 */
                border-radius: 10px;  /* 边框圆角 */
                background-color: #f2f2f2;  /* 背景颜色 */
                color: #4CAF50;  /* 文本颜色 */
                font-size: 24px;  /* 字体大小 */
                padding: 10px;  /* 内边距 */
            }
            QLabel:hover {
                background-color: #e0e0e0;  /* 鼠标悬停时的背景颜色 */
            }
            """)
        #菜单栏
        self.menuBar = self.menuBar()  # 获取窗口的菜单栏
        self.menuBar.setGeometry(QtCore.QRect(0, 0, 964, 30))  # 设置菜单栏的位置和大小

        # 创建菜单项
        self.menuhistory=self.menuBar.addMenu("个人中心")
        # 将动作添加到菜单项
        self.actionPerson = QtWidgets.QAction("历史记录", self)
        self.menuhistory.addAction(self.actionPerson)


        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)
        #事件部分
        self.sumit_buttion.clicked.connect(self.upload)
        self.check_buttion.clicked.connect(self.check)
        self.rep_buttion.clicked.connect(self.export_report)
        # 将历史记录动作与槽函数关联，以在触发时执行相应的逻辑
        self.actionPerson.triggered.connect(self.show_history)

    def retranslateUi(self, Form):
        Form.setWindowTitle(self._translate("Form", "Form"))
        self.sumit_buttion.setText(self._translate("Form", "上传文档"))
        self.check_buttion.setText(self._translate("Form", "开始查重"))
        self.rep_buttion.setText(self._translate("Form", "导出报告"))
        self.check_label.setText(self._translate("Form", "查重率为："))


    def update_content_text(self, file_path):
        try:
            document = Document(file_path)
            content = ""
            for paragraph in document.paragraphs:
                content += paragraph.text + "\n"

            self.content_text.setPlainText(content)
            self.content_text.setReadOnly(True)
        except Exception as e:
            print(f"An error occurred while reading the document: {e}")

    def upload(self):
        try:
            excel_file, _ = QtWidgets.QFileDialog.getOpenFileName(self.Form, '打开文件', 'C:\\', '所有文件(*)')
            self.file = excel_file
            self.update_content_text(self.file)
        except Exception as e:
            self.rep_text.setText(f"An error occurred: {e}")
            # print(f"An error occurred: {e}")

    def check(self):
        try:
            library_path = os.environ['document_library_path']
            if not self.file:
                QtWidgets.QMessageBox.warning(self, "错误消息", "文件地址为空")
                return

                # 检查文件是否存在
            if not os.path.exists(self.file):
                QtWidgets.QMessageBox.warning(self, "错误消息", "文件不存在")
                return
            self.rep_text.setText("")
            du=create_checker(self.file,library_path=os.environ['document_library_path'])
            return_list,self.Duplication_rate=du.work(self.check_progressBar)
            self.check_label.setText(self._translate("Form", f"查重率为:  {float(self.Duplication_rate)}"))
            #添加记录到数据库
            file_name, _ = os.path.splitext(os.path.basename(self.file))
            self.user.add_activity(article=file_name, duplication_rate=float(self.Duplication_rate))
            for element in return_list:
                content=f"\n上传文档句子：'{element[0]}'\n最相似的句子：'{element[1]}'\n最大相似度：{element[2]}\n所在文档：{element[3]}"
                if self.rep_text.toPlainText().startswith("An error occurred:"):
                    self.rep_text.setText("")
                    self.rep_text.append(content)
                else:
                    self.rep_text.append(content)

            self.rep_text.setReadOnly(True)
        except Exception as e:
            self.rep_text.setText(f"An error occurred: {e}")
            # print(f"An error occurred: {e}")
    #导出函数
    def export_report(self):
        try:
            # 弹出文件保存对话框，获取用户选择的文件路径
            save_folder= QFileDialog.getExistingDirectory(self.Form, '选择导出位置', 'C:\\')

            file_name, _ = os.path.splitext(os.path.basename(self.file))
            save_path = os.path.join(save_folder, file_name + "_report.txt")

            # 如果用户取消了保存，则返回
            if not save_path:
                return
            if save_path:
                QtWidgets.QMessageBox.warning(self.Form, "取消", "导出报告操作已取消")
            # 将报告内容保存到用户指定的文件中
            with open(save_path, 'w', encoding='utf-8') as file:
                file.write(f"查重率为: {self.Duplication_rate}\n")
                file.write(self.rep_text.toPlainText())

            # 弹出保存成功的提示框
            QtWidgets.QMessageBox.information(self.Form, "成功", "报告已成功导出")
        except Exception as e:
            # 弹出错误提示框
            QtWidgets.QMessageBox.critical(self.Form, "错误", f"导出报告时发生错误: {e}")
            print(e)


    def show_history(self):
        try:

            UI = history_window(self.user, parent=self)
            UI.show()

        except Exception as e:
            print(e)


def create_userUI(user:nomal_user):
    app = QtWidgets.QApplication(sys.argv)
    UI = userUiWorkForm(user)
    UI.show()
    sys.exit(app.exec_())
if __name__ == "__main__":
    user =nomal_user("user","user", "123456", False)
    create_userUI(user=user)